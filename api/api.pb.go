// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DEVICE int32

const (
	DEVICE_DEVICE_UNKNOWN DEVICE = 0
	DEVICE_MOBILE         DEVICE = 1
	DEVICE_WIFI           DEVICE = 2
	DEVICE_BLUETOOTH      DEVICE = 3
)

var DEVICE_name = map[int32]string{
	0: "DEVICE_UNKNOWN",
	1: "MOBILE",
	2: "WIFI",
	3: "BLUETOOTH",
}

var DEVICE_value = map[string]int32{
	"DEVICE_UNKNOWN": 0,
	"MOBILE":         1,
	"WIFI":           2,
	"BLUETOOTH":      3,
}

func (x DEVICE) String() string {
	return proto.EnumName(DEVICE_name, int32(x))
}

func (DEVICE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

type Status struct {
	Loc                  *Coordinates    `protobuf:"bytes,1,opt,name=loc,proto3" json:"loc,omitempty"`
	ActiveDetectors      []DEVICE        `protobuf:"varint,2,rep,packed,name=active_detectors,json=activeDetectors,proto3,enum=api.DEVICE" json:"active_detectors,omitempty"`
	BatteryVoltage       float64         `protobuf:"fixed64,3,opt,name=battery_voltage,json=batteryVoltage,proto3" json:"battery_voltage,omitempty"`
	DetectionCount       map[int32]int64 `protobuf:"bytes,4,rep,name=detection_count,json=detectionCount,proto3" json:"detection_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetLoc() *Coordinates {
	if m != nil {
		return m.Loc
	}
	return nil
}

func (m *Status) GetActiveDetectors() []DEVICE {
	if m != nil {
		return m.ActiveDetectors
	}
	return nil
}

func (m *Status) GetBatteryVoltage() float64 {
	if m != nil {
		return m.BatteryVoltage
	}
	return 0
}

func (m *Status) GetDetectionCount() map[int32]int64 {
	if m != nil {
		return m.DetectionCount
	}
	return nil
}

type DetectionEvent struct {
	Time []*timestamp.Timestamp `protobuf:"bytes,1,rep,name=time,proto3" json:"time,omitempty"`
	// Types that are valid to be assigned to DeviceId:
	//	*DetectionEvent_WifiMac
	//	*DetectionEvent_BluetoothMac
	//	*DetectionEvent_MobileImei
	DeviceId             isDetectionEvent_DeviceId `protobuf_oneof:"device_id"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DetectionEvent) Reset()         { *m = DetectionEvent{} }
func (m *DetectionEvent) String() string { return proto.CompactTextString(m) }
func (*DetectionEvent) ProtoMessage()    {}
func (*DetectionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{1}
}

func (m *DetectionEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetectionEvent.Unmarshal(m, b)
}
func (m *DetectionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetectionEvent.Marshal(b, m, deterministic)
}
func (m *DetectionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectionEvent.Merge(m, src)
}
func (m *DetectionEvent) XXX_Size() int {
	return xxx_messageInfo_DetectionEvent.Size(m)
}
func (m *DetectionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DetectionEvent proto.InternalMessageInfo

func (m *DetectionEvent) GetTime() []*timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type isDetectionEvent_DeviceId interface {
	isDetectionEvent_DeviceId()
}

type DetectionEvent_WifiMac struct {
	WifiMac string `protobuf:"bytes,2,opt,name=wifi_mac,json=wifiMac,proto3,oneof"`
}

type DetectionEvent_BluetoothMac struct {
	BluetoothMac string `protobuf:"bytes,3,opt,name=bluetooth_mac,json=bluetoothMac,proto3,oneof"`
}

type DetectionEvent_MobileImei struct {
	MobileImei string `protobuf:"bytes,4,opt,name=mobile_imei,json=mobileImei,proto3,oneof"`
}

func (*DetectionEvent_WifiMac) isDetectionEvent_DeviceId() {}

func (*DetectionEvent_BluetoothMac) isDetectionEvent_DeviceId() {}

func (*DetectionEvent_MobileImei) isDetectionEvent_DeviceId() {}

func (m *DetectionEvent) GetDeviceId() isDetectionEvent_DeviceId {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *DetectionEvent) GetWifiMac() string {
	if x, ok := m.GetDeviceId().(*DetectionEvent_WifiMac); ok {
		return x.WifiMac
	}
	return ""
}

func (m *DetectionEvent) GetBluetoothMac() string {
	if x, ok := m.GetDeviceId().(*DetectionEvent_BluetoothMac); ok {
		return x.BluetoothMac
	}
	return ""
}

func (m *DetectionEvent) GetMobileImei() string {
	if x, ok := m.GetDeviceId().(*DetectionEvent_MobileImei); ok {
		return x.MobileImei
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DetectionEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DetectionEvent_OneofMarshaler, _DetectionEvent_OneofUnmarshaler, _DetectionEvent_OneofSizer, []interface{}{
		(*DetectionEvent_WifiMac)(nil),
		(*DetectionEvent_BluetoothMac)(nil),
		(*DetectionEvent_MobileImei)(nil),
	}
}

func _DetectionEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DetectionEvent)
	// device_id
	switch x := m.DeviceId.(type) {
	case *DetectionEvent_WifiMac:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.WifiMac)
	case *DetectionEvent_BluetoothMac:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.BluetoothMac)
	case *DetectionEvent_MobileImei:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.MobileImei)
	case nil:
	default:
		return fmt.Errorf("DetectionEvent.DeviceId has unexpected type %T", x)
	}
	return nil
}

func _DetectionEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DetectionEvent)
	switch tag {
	case 2: // device_id.wifi_mac
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.DeviceId = &DetectionEvent_WifiMac{x}
		return true, err
	case 3: // device_id.bluetooth_mac
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.DeviceId = &DetectionEvent_BluetoothMac{x}
		return true, err
	case 4: // device_id.mobile_imei
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.DeviceId = &DetectionEvent_MobileImei{x}
		return true, err
	default:
		return false, nil
	}
}

func _DetectionEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DetectionEvent)
	// device_id
	switch x := m.DeviceId.(type) {
	case *DetectionEvent_WifiMac:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.WifiMac)))
		n += len(x.WifiMac)
	case *DetectionEvent_BluetoothMac:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.BluetoothMac)))
		n += len(x.BluetoothMac)
	case *DetectionEvent_MobileImei:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.MobileImei)))
		n += len(x.MobileImei)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Coordinates struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Latitude             float64  `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Coordinates) Reset()         { *m = Coordinates{} }
func (m *Coordinates) String() string { return proto.CompactTextString(m) }
func (*Coordinates) ProtoMessage()    {}
func (*Coordinates) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{2}
}

func (m *Coordinates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Coordinates.Unmarshal(m, b)
}
func (m *Coordinates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Coordinates.Marshal(b, m, deterministic)
}
func (m *Coordinates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coordinates.Merge(m, src)
}
func (m *Coordinates) XXX_Size() int {
	return xxx_messageInfo_Coordinates.Size(m)
}
func (m *Coordinates) XXX_DiscardUnknown() {
	xxx_messageInfo_Coordinates.DiscardUnknown(m)
}

var xxx_messageInfo_Coordinates proto.InternalMessageInfo

func (m *Coordinates) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Coordinates) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Coordinates) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type EventLog struct {
	DetectorId           string            `protobuf:"bytes,1,opt,name=detector_id,json=detectorId,proto3" json:"detector_id,omitempty"`
	Loc                  *Coordinates      `protobuf:"bytes,2,opt,name=loc,proto3" json:"loc,omitempty"`
	Events               []*DetectionEvent `protobuf:"bytes,20,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EventLog) Reset()         { *m = EventLog{} }
func (m *EventLog) String() string { return proto.CompactTextString(m) }
func (*EventLog) ProtoMessage()    {}
func (*EventLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{3}
}

func (m *EventLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventLog.Unmarshal(m, b)
}
func (m *EventLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventLog.Marshal(b, m, deterministic)
}
func (m *EventLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLog.Merge(m, src)
}
func (m *EventLog) XXX_Size() int {
	return xxx_messageInfo_EventLog.Size(m)
}
func (m *EventLog) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLog.DiscardUnknown(m)
}

var xxx_messageInfo_EventLog proto.InternalMessageInfo

func (m *EventLog) GetDetectorId() string {
	if m != nil {
		return m.DetectorId
	}
	return ""
}

func (m *EventLog) GetLoc() *Coordinates {
	if m != nil {
		return m.Loc
	}
	return nil
}

func (m *EventLog) GetEvents() []*DetectionEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type SendStreamResponse struct {
	Mobile               int64    `protobuf:"varint,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Bluetooth            int64    `protobuf:"varint,2,opt,name=bluetooth,proto3" json:"bluetooth,omitempty"`
	Wifi                 int64    `protobuf:"varint,3,opt,name=wifi,proto3" json:"wifi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendStreamResponse) Reset()         { *m = SendStreamResponse{} }
func (m *SendStreamResponse) String() string { return proto.CompactTextString(m) }
func (*SendStreamResponse) ProtoMessage()    {}
func (*SendStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{4}
}

func (m *SendStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendStreamResponse.Unmarshal(m, b)
}
func (m *SendStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendStreamResponse.Marshal(b, m, deterministic)
}
func (m *SendStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendStreamResponse.Merge(m, src)
}
func (m *SendStreamResponse) XXX_Size() int {
	return xxx_messageInfo_SendStreamResponse.Size(m)
}
func (m *SendStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendStreamResponse proto.InternalMessageInfo

func (m *SendStreamResponse) GetMobile() int64 {
	if m != nil {
		return m.Mobile
	}
	return 0
}

func (m *SendStreamResponse) GetBluetooth() int64 {
	if m != nil {
		return m.Bluetooth
	}
	return 0
}

func (m *SendStreamResponse) GetWifi() int64 {
	if m != nil {
		return m.Wifi
	}
	return 0
}

func init() {
	proto.RegisterEnum("api.DEVICE", DEVICE_name, DEVICE_value)
	proto.RegisterType((*Status)(nil), "api.Status")
	proto.RegisterMapType((map[int32]int64)(nil), "api.Status.DetectionCountEntry")
	proto.RegisterType((*DetectionEvent)(nil), "api.DetectionEvent")
	proto.RegisterType((*Coordinates)(nil), "api.Coordinates")
	proto.RegisterType((*EventLog)(nil), "api.EventLog")
	proto.RegisterType((*SendStreamResponse)(nil), "api.SendStreamResponse")
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_1b40cafcd4234784) }

var fileDescriptor_1b40cafcd4234784 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x6a, 0xdb, 0x4a,
	0x10, 0x8e, 0x2c, 0xc7, 0xc7, 0x1e, 0xc5, 0x8e, 0x98, 0x84, 0x1c, 0xe1, 0x1c, 0x88, 0x8f, 0xe1,
	0x70, 0x4c, 0x4b, 0x1d, 0x70, 0xa0, 0x94, 0xd0, 0x9b, 0xc4, 0x71, 0x89, 0x69, 0x12, 0x97, 0x75,
	0x7e, 0x2e, 0x0a, 0x15, 0x6b, 0x6b, 0xe3, 0x2e, 0x95, 0xb4, 0x42, 0x5a, 0xbb, 0x18, 0xfa, 0x24,
	0x7d, 0x8e, 0x3e, 0x58, 0x1f, 0xa1, 0xec, 0xae, 0xe4, 0x24, 0x4d, 0xd2, 0xbb, 0x99, 0x6f, 0xbf,
	0x99, 0x9d, 0xf9, 0x66, 0x76, 0xa1, 0x4e, 0x13, 0xbe, 0x4f, 0x13, 0xde, 0x4d, 0x52, 0x21, 0x05,
	0xda, 0x34, 0xe1, 0xcd, 0xbd, 0x99, 0x10, 0xb3, 0x90, 0xed, 0x6b, 0x68, 0x32, 0xbf, 0xdd, 0x97,
	0x3c, 0x62, 0x99, 0xa4, 0x51, 0x62, 0x58, 0xcd, 0xdd, 0xdf, 0x09, 0x2c, 0x4a, 0xe4, 0xd2, 0x1c,
	0xb6, 0xbf, 0x97, 0xa0, 0x32, 0x96, 0x54, 0xce, 0x33, 0x6c, 0x83, 0x1d, 0x8a, 0xa9, 0x67, 0xb5,
	0xac, 0x8e, 0xd3, 0x73, 0xbb, 0xea, 0x9a, 0xbe, 0x10, 0x69, 0xc0, 0x63, 0x2a, 0x59, 0x46, 0xd4,
	0x21, 0xbe, 0x06, 0x97, 0x4e, 0x25, 0x5f, 0x30, 0x3f, 0x60, 0x92, 0x4d, 0xa5, 0x48, 0x33, 0xaf,
	0xd4, 0xb2, 0x3b, 0x8d, 0x9e, 0xa3, 0x03, 0x4e, 0x06, 0xd7, 0xc3, 0xfe, 0x80, 0x6c, 0x1a, 0xd2,
	0x49, 0xc1, 0xc1, 0xff, 0x61, 0x73, 0x42, 0xa5, 0x64, 0xe9, 0xd2, 0x5f, 0x88, 0x50, 0xd2, 0x19,
	0xf3, 0xec, 0x96, 0xd5, 0xb1, 0x48, 0x23, 0x87, 0xaf, 0x0d, 0x8a, 0xa7, 0xb0, 0x69, 0x32, 0x73,
	0x11, 0xfb, 0x53, 0x31, 0x8f, 0xa5, 0x57, 0x6e, 0xd9, 0x1d, 0xa7, 0xb7, 0xa7, 0xf3, 0x9b, 0x52,
	0xbb, 0x27, 0x05, 0xa5, 0xaf, 0x18, 0x83, 0x58, 0xa6, 0x4b, 0xd2, 0x08, 0x1e, 0x80, 0xcd, 0x23,
	0xd8, 0x7a, 0x82, 0x86, 0x2e, 0xd8, 0x5f, 0xd8, 0x52, 0x77, 0xb9, 0x4e, 0x94, 0x89, 0xdb, 0xb0,
	0xbe, 0xa0, 0xe1, 0x9c, 0x79, 0xa5, 0x96, 0xd5, 0xb1, 0x89, 0x71, 0x0e, 0x4b, 0x6f, 0xac, 0xf6,
	0x0f, 0x0b, 0x1a, 0xab, 0x1c, 0x83, 0x05, 0x8b, 0x25, 0x76, 0xa1, 0xac, 0xf4, 0xf5, 0x2c, 0x5d,
	0x54, 0xb3, 0x6b, 0xb4, 0xed, 0x16, 0xda, 0x76, 0x2f, 0x0b, 0xf1, 0x89, 0xe6, 0xe1, 0x2e, 0x54,
	0xbf, 0xf2, 0x5b, 0xee, 0x47, 0x74, 0xaa, 0xf3, 0xd7, 0x4e, 0xd7, 0xc8, 0x5f, 0x0a, 0x39, 0xa7,
	0x53, 0xfc, 0x0f, 0xea, 0x93, 0x70, 0xce, 0xa4, 0x10, 0xf2, 0xb3, 0x66, 0xd8, 0x39, 0x63, 0x63,
	0x05, 0x2b, 0xda, 0xbf, 0xe0, 0x44, 0x62, 0xc2, 0x43, 0xe6, 0xf3, 0x88, 0x71, 0xaf, 0x9c, 0x93,
	0xc0, 0x80, 0xc3, 0x88, 0xf1, 0x63, 0x07, 0x6a, 0x01, 0x5b, 0xf0, 0x29, 0xf3, 0x79, 0xd0, 0xfe,
	0x08, 0xce, 0xbd, 0xc1, 0x21, 0x42, 0x39, 0xa6, 0xba, 0x64, 0xab, 0x53, 0x23, 0xda, 0xc6, 0x26,
	0x54, 0x43, 0x2a, 0xb9, 0x9c, 0x07, 0xa6, 0x6d, 0x8b, 0xac, 0x7c, 0xfc, 0x07, 0x6a, 0xa1, 0x88,
	0x67, 0xe6, 0xd0, 0x4c, 0xe9, 0x0e, 0x68, 0x7f, 0x83, 0xaa, 0x56, 0xe2, 0x4c, 0xcc, 0x70, 0x0f,
	0x9c, 0x62, 0x0d, 0x7c, 0x1e, 0xe4, 0x17, 0x40, 0x01, 0x0d, 0x83, 0x62, 0xa5, 0x4a, 0x7f, 0x5a,
	0xa9, 0x97, 0x50, 0x61, 0x2a, 0x61, 0xe6, 0x6d, 0x6b, 0x4d, 0xb7, 0xcc, 0x22, 0x3d, 0x90, 0x9d,
	0xe4, 0x94, 0xf6, 0x27, 0xc0, 0x31, 0x8b, 0x83, 0xb1, 0x4c, 0x19, 0x8d, 0x08, 0xcb, 0x12, 0x11,
	0x67, 0x0c, 0x77, 0xa0, 0x62, 0xb4, 0xd0, 0x25, 0xd8, 0x24, 0xf7, 0x54, 0x27, 0x2b, 0x21, 0xf3,
	0xe9, 0xde, 0x01, 0x4a, 0x17, 0x35, 0x08, 0xdd, 0xa2, 0x4d, 0xb4, 0xfd, 0xe2, 0x08, 0x2a, 0x66,
	0x85, 0x11, 0xa1, 0x61, 0x2c, 0xff, 0xea, 0xe2, 0xfd, 0xc5, 0xe8, 0xe6, 0xc2, 0x5d, 0x43, 0x80,
	0xca, 0xf9, 0xe8, 0x78, 0x78, 0x36, 0x70, 0x2d, 0xac, 0x42, 0xf9, 0x66, 0xf8, 0x6e, 0xe8, 0x96,
	0xb0, 0x0e, 0xb5, 0xe3, 0xb3, 0xab, 0xc1, 0xe5, 0x68, 0x74, 0x79, 0xea, 0xda, 0xbd, 0x9f, 0x16,
	0xb8, 0x7d, 0x11, 0x86, 0x5a, 0x83, 0x31, 0x4b, 0xd5, 0x54, 0xf0, 0x15, 0x94, 0x55, 0xdd, 0x58,
	0xd7, 0xcd, 0x15, 0x02, 0x36, 0x77, 0x1e, 0xed, 0xcf, 0x40, 0xbd, 0x4d, 0x7c, 0x0b, 0x70, 0xd7,
	0x26, 0x3e, 0xa5, 0x48, 0xf3, 0x6f, 0xf3, 0x1e, 0x1e, 0x89, 0xd1, 0xb1, 0xf0, 0x10, 0x1a, 0x84,
	0x25, 0x22, 0x95, 0x1f, 0x44, 0xc6, 0x55, 0x04, 0x3e, 0x92, 0xfe, 0xd9, 0x9b, 0x0f, 0x60, 0xc3,
	0xc4, 0xe6, 0x9f, 0x82, 0x73, 0xef, 0xd9, 0x3d, 0x17, 0x34, 0xa9, 0x68, 0xff, 0xe0, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x11, 0x76, 0xbb, 0x17, 0x9f, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollectorServiceClient is the client API for CollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectorServiceClient interface {
	Send(ctx context.Context, in *EventLog, opts ...grpc.CallOption) (*empty.Empty, error)
	SendStream(ctx context.Context, opts ...grpc.CallOption) (CollectorService_SendStreamClient, error)
	ReportPosition(ctx context.Context, in *Coordinates, opts ...grpc.CallOption) (*empty.Empty, error)
	ReportStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*empty.Empty, error)
}

type collectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCollectorServiceClient(cc *grpc.ClientConn) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) Send(ctx context.Context, in *EventLog, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.CollectorService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (CollectorService_SendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CollectorService_serviceDesc.Streams[0], "/api.CollectorService/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorServiceSendStreamClient{stream}
	return x, nil
}

type CollectorService_SendStreamClient interface {
	Send(*DetectionEvent) error
	CloseAndRecv() (*SendStreamResponse, error)
	grpc.ClientStream
}

type collectorServiceSendStreamClient struct {
	grpc.ClientStream
}

func (x *collectorServiceSendStreamClient) Send(m *DetectionEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorServiceSendStreamClient) CloseAndRecv() (*SendStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorServiceClient) ReportPosition(ctx context.Context, in *Coordinates, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.CollectorService/ReportPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) ReportStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.CollectorService/ReportStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServiceServer is the server API for CollectorService service.
type CollectorServiceServer interface {
	Send(context.Context, *EventLog) (*empty.Empty, error)
	SendStream(CollectorService_SendStreamServer) error
	ReportPosition(context.Context, *Coordinates) (*empty.Empty, error)
	ReportStatus(context.Context, *Status) (*empty.Empty, error)
}

func RegisterCollectorServiceServer(s *grpc.Server, srv CollectorServiceServer) {
	s.RegisterService(&_CollectorService_serviceDesc, srv)
}

func _CollectorService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CollectorService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).Send(ctx, req.(*EventLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServiceServer).SendStream(&collectorServiceSendStreamServer{stream})
}

type CollectorService_SendStreamServer interface {
	SendAndClose(*SendStreamResponse) error
	Recv() (*DetectionEvent, error)
	grpc.ServerStream
}

type collectorServiceSendStreamServer struct {
	grpc.ServerStream
}

func (x *collectorServiceSendStreamServer) SendAndClose(m *SendStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorServiceSendStreamServer) Recv() (*DetectionEvent, error) {
	m := new(DetectionEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CollectorService_ReportPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coordinates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).ReportPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CollectorService/ReportPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).ReportPosition(ctx, req.(*Coordinates))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CollectorService/ReportStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).ReportStatus(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _CollectorService_Send_Handler,
		},
		{
			MethodName: "ReportPosition",
			Handler:    _CollectorService_ReportPosition_Handler,
		},
		{
			MethodName: "ReportStatus",
			Handler:    _CollectorService_ReportStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStream",
			Handler:       _CollectorService_SendStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
